# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageNameAndTag: '$(ImageName):$(build.buildId)'
  javaNameAndTag: '$(JAVA_IMAGE_NAME=):$(build.buildId)'
  nginxNameAndTag: '$(NGINX_IMAGE_NAME=):$(build.buildId)'

steps:
  - script: |
      cd $(JavasampleDockerfileFolderPath)
      docker build -f Dockerfile -t $(ContainerRegistryUri)/$(imageNameAndTag) .
    displayName: 'docker build image'
  - script: |
      echo $(ContainerRegistryPassword) | docker login -u $(ContainerRegistryUsername) --password-stdin $(ContainerRegistryUri)
      docker push $(ContainerRegistryUri)/$(imageNameAndTag)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Push docker image'
  - script: |
      cd $(JavasampleDockerfileFolderPath)
      docker build -f Dockerfile -t $(ContainerRegistryUri)/$(nginxNameAndTag) .
    displayName: 'docker build nginx image'
  - script: |
      echo $(ContainerRegistryPassword) | docker login -u $(ContainerRegistryUsername) --password-stdin $(ContainerRegistryUri)
      docker push $(ContainerRegistryUri)/$(nginxNameAndTag)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Push docker nginx image'
  - script: |
      cd $(JavasampleDockerfileFolderPath)
      docker build -f Dockerfile -t $(ContainerRegistryUri)/$(javaNameAndTag) .
    displayName: 'docker build java image'
  - script: |
      echo $(ContainerRegistryPassword) | docker login -u $(ContainerRegistryUsername) --password-stdin $(ContainerRegistryUri)
      docker push $(ContainerRegistryUri)/$(javaNameAndTag)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: 'Push docker java image'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/$(JavasampleDockerfileFolderPath)
      contents: 'docker-compose.yml'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      cleanTargetFolder: true
    displayName: 'Copy docker compose file to staging directory'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/armtemplates/docker-for-azure
      contents: '**'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      cleanTargetFolder: false
    displayName: 'Copy arm templates to staging directory'
  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'drop'
    displayName: 'Publish docker compose file'
